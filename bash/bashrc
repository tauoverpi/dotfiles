# Bash initialization for interactive non-login shells and
# for remote shells (info "(bash) Bash Startup Files").

# Export 'SHELL' to child processes.  Programs such as 'screen'
# honor it and otherwise use /bin/sh.
export SHELL

if [[ $- != *i* ]]
then
    # We are being invoked from a non-interactive shell.  If this
    # is an SSH session (as in "ssh host command"), source
    # /etc/profile so we get PATH and other essential variables.
    [[ -n "$SSH_CLIENT" ]] && source /etc/profile

    # Don't do anything else.
    return
fi

# Source the system-wide file.
# eval $(thefuck --alias)
source /etc/bashrc

# Adjust the prompt depending on whether we're in 'guix environment'.
if [ -n "$GUIX_ENVIRONMENT" ]
then
    PS1='\u@\h \w [env] λ '
else
    PS1='\u@\h \w λ '
fi
alias ls='ls -p -F --color=none'
alias ll='ls -l'
alias grep='grep --color=none'
alias vga='xrandr --output VGA-1 --auto'

# still need to rewrite this...
export MPD_HOST=$HOME/.mpd/socket
export GUIX_PACKAGE_PATH=$HOME/projects/packages
export IDRIS_CC=gcc
export EDITOR=nvim
export PATH=$HOME/.local/bin:$PATH
export SSL_CERT_DIR=/run/current-system/profile/etc/ssl/certs
export CURL_CA_BUNDLE=$SSL_CERT_DIR/ca-certificates.crt
export _JAVA_AWT_WM_NONREPARENTING=1
export GUILE_AUTO_COMPILE=0
export CC=gcc

# MAIL
export EMAIL='tauoverpi@yandex.com'
# export MAIL='
export MAILDIR="${HOME}/.mail"
export RANDFILE="${HOME}/.cache/neomutt/rnd"
export VISUAL='nvim'

alias reconfigure='sudo -E guix system reconfigure $HOME/projects/sr.ht/dotfiles/guix/config.scm'

toWav ()
{
	sox -r 8000 -e unsigned -b 8 -c 1 $1 $2
}

share ()
{
	uri=$(curl -F"file=@$1" https://0x0.st)
	echo $uri | xclip -sel clip
	echo $uri
}

shareclip() {
	xclip -sel clip -o > /tmp/shareclip
	share /tmp/shareclip
}

shorten ()
{
	uri=$(curl -F"shorten=$1" https://0x0.st)
	echo $uri | xclip -sel clip
	echo $uri
}

url()
{
	uri=$(curl -F"url=$1" https://0x0.st)
	echo $uri | xclip -sel clip
	echo $uri
}

ytdl ()
{
	youtube-dl -io '%(title)s.%(ext)s' \
		--external-downloader=aria2c \
		--geo-bypass \
		$@
}

wcap ()
{
	target="/tmp/tmp.png"
	[ -z $1 ] || target=$1
	scrot -s $target
	share $target
}

scap ()
{
	target="/tmp/tmp.png"
	[ -z $1 ] || target=$1
	scrot $target
	share $target
}

search ()
{
	links "https://searx.me/?preferences=eJx1VUuP1DAM_jX0Ug3iceDUAwIhkJAWMQvXyE08rWkalzid2fLrcWb7WnY4TEdN7O_hxG5EGX0Sw8EEvJgEdfUJvGDhmExEYX_GWImlQzvWL9Ol8BCaERqsMBx-HAvPFnx-KRwJ1B6dGfzYUJDqJ_UHTx2allOHk7x48-FuwJBRldJ4Ct3KW0e-CMbMn-O-hBMFSmjERvZ-yXxvLYqYj3dfFOQSNaCgXrWYIfLDNAuHMbHlfvCYsCoETigI0bbVqyK12GPFYiEWGJ6qPaI_GeXl2EMiDlnGfQTbqaof378qYc9aCl39fH__7bgI0PfjFT47sZCw4TgZQY82bSXBoBwoVUe2A3VgTuQxM5wiYil8SheIWDqKmpYBDCXdPTMkY4QtgS97dAS6SAGMOZNDzgARnaPnQWOQwYO0CpQLlCMb5sZjqctTCcOwE_FxdFpc02DACLnYjpo6bfsNNWoDJO1jFmI9vasRF5nclhMmgB35anwVvpfTj0LWmOufbllrD-l8w-TG3iB2iXqUuVKPdAvArH_NB9sIj_8j5zPhXtnrh51wQXQD6h1YwXv-peR7MQv8msR6WSMOvKvxhvPM1ZqG2gS5hhvyCSLzWuMW6gj5MZvO147OWJLcUrPorSnVo17jNGdN0GbMHUnUTiSwz-7KDSXbAqap56BN_CQscTdxYmm5g7BpeDye1fkpQg-e6oizpn7qtb3iVKYIQby2kbtlaSlmTgWNzhHy1L1Tq_nXcPno5uZZPr2ly9s_4le583VazPwTtp3wnwD9XotcSMTqYNtrsBBiKSmONo0xy9PZisHiFSGfqGWHZX7MtdmhbNCv375997C_0JQ81EtGgpiGPBf3hXFN6fA6VvN022-tzXl1uE7GZWhNEBw-3C7yfvX3BcLWpEWPqWVXfbs73hfzYNQ-q5bt6xQ-SJr06-G5oez4_BfilHiF&q=$(echo $@ | sed 's/ /%20/g')"
}
alias s=search

hibernate()
{
	sudo su -c 'echo mem >> /sys/power/state'
}

build ()
{
  GUIX_PACKAGE_PATH=$HOME/projects/packages guix build $@
}

b4 ()
{
	echo -e "#include <stdio.h>\nint main(void) { for(int t = 0;; t++) { int x = $@; putchar(x); } return 0; }" > /tmp/bb.c
        gcc /tmp/bb.c -o /tmp/bb
        /tmp/bb | aplay -
}

undecorate()
{
	 xprop -f _MOTIF_WM_HINTS 32c -set _MOTIF_WM_HINTS "0x2, 0x0, 0x0, 0x0, 0x0"
}

machinecode()
{
	pushd /tmp
	while read l
	do
		echo -e "format $1 executable $2\n$l" > c4.asm
		fasm c4.asm
		echo
		hexdump -C -s 120 c4
		echo
		echo -n "> "
	done
	popd
}

song()
{
	mpc current -f "%artist% - %album% - %title%" >> ~/.songs
}

current()
{
	mpc current -f "%artist% - %album% - %title%" | xclip -sel clip
}

wh()
{
	curl -L "https://wallhaven.cc/api/v1/search?$1" | sed 's,\\,,g' | egrep -o "https://w.wallhaven.cc/full/[a-z0-9]+/wallhaven-[a-z0-9]+.jpg"
}

cprint()
{
	cat << EOF > /tmp/cprint.c
#include <stdio.h>
$1
int main(void) {
	printf("%x\n", $2);
	return 0;
}
EOF
	clang /tmp/cprint.c -o /tmp/cprint
	/tmp/cprint
}

radio() {
	case $1 in
		"cafe")
			mpc clear
			mpc add http://lainon.life:8000/cafe.ogg
			;;
		"cyberia")
			mpc clear
			mpc add http://lainon.life:8000/cyberia.ogg
			;;
		"everything")
			mpc clear
			mpc add http://lainon.life:8000/everything.ogg
			;;
		*)
			;;
	esac
	mpc stop; mpc play
}

recon()
{
	GUIX_PACKAGE_PATH=$HOME/projects/packages sudo -E guix system reconfigure $HOME/projects/dotfiles/guix/config.scm --verbosity=3 $@
}

iwlwifi()
{
	sudo modprobe -r iwldvm
	sudo modprobe iwlwifi
}

crf()
{
	foo=(https://chalmersrobotics.se/status/api/image/crf_webcam_outer \
		https://chalmersrobotics.se/status/api/image/crf_webcam_inner \
		https://chalmersrobotics.se/status/api/image/crf_webcam_platform)
	echo ${foo[*]} | xargs mpv
}

lexivga()
{
	case $1 in
		"bright")
			xrandr --output VGA-1 --brightness $2
			;;
		"off")
			xrandr --output VGA-1 --off
			;;
		*)
			xrandr --output VGA-1 --mode 1920x1080 --left-of LVDS-1
			;;
	esac
}

repeatedly()
{
    while true
    do
        if [[ $(stat -c "%Y" $3) < $(stat -c "%Y" $4) ]]
        then
            echo -e "\x1b[2J\x1b[0;0H"
            $2
        fi
        sleep $1
    done
}

fortune
echo
