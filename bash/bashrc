function fuck () {
    TF_PYTHONIOENCODING=$PYTHONIOENCODING;
    export TF_SHELL=bash;
    export TF_ALIAS=fuck;
    export TF_SHELL_ALIASES=$(alias);
    export TF_HISTORY=$(fc -ln -10);
    export PYTHONIOENCODING=utf-8;
    TF_CMD=$(
        thefuck THEFUCK_ARGUMENT_PLACEHOLDER "$@"
    ) && eval "$TF_CMD";
    unset TF_HISTORY;
    export PYTHONIOENCODING=$TF_PYTHONIOENCODING;
    history -s $TF_CMD;
}

export SHELL
export PATH=$HOME/bin:$HOME/.config/guix/current/bin:$PATH
export EDITOR=nvim
export GUIX_PACKAGE_PATH=$HOME/git/github/packages
export PROMPT_COMMAND='history -a'
export MPD_HOST=$HOME/.mpd/connection
export MAIL=$HOME/.mail

if [[ $- != *i* ]]
then
    [[ -n "$SSH_CLIENT" ]] && source /etc/profile

    # Don't do anything else.
    return
fi

if [ -z $TMUX ]
then
  tmux
fi

# Source the system-wide file.
source /etc/bashrc

# Adjust the prompt depending on whether we're in 'guix environment'.
CLEAR=$(echo -e "\x1b[0m")
RED=$(echo -e "\x1b[31m")
GREEN=$(echo -e "\x1b[32m")
YELLOW=$(echo -e "\x1b[33m")
BLUE=$(echo -e "\x1b[34m")
if [ -n "$GUIX_ENVIRONMENT" ]
then
    PS1="\u@\h \w [env] λ "
else
  PS1="\w λ "
fi
alias ls='ls -p --color=auto'
alias ll='ls -l'
alias grep='grep --color=auto'
alias watch='watch -c'
alias crep='grep --color=always'
alias vga='xrandr --output VGA-1 --auto'
alias recon='sudo -E guix system reconfigure $HOME/dotfiles/latitude.scm -c 1 -M 1'
alias config="$EDITOR $HOME/dotfiles/latitude.scm"
alias note='nvim ~/.note'
alias cnote='nvim ~/.cass'
alias res='nvim ~/git/github/resources/res'
alias game='nvim ~/git/blog/challenges'
alias book='nvim ~/git/cas9/game.md'
alias seductive='sed'
alias awkward='awk'
alias wttr='curl -s wttr.in/gothenburg | head -n -1'
alias moon='curl -s wttr.in/moon | head -n -1'
alias mbus='wine64 ~/.wine/drive_c/Program\ Files\ \(x86\)/PiiGAB/MBWizard/MBWizard.exe'
alias lt='java -jar ~/data/build/languagetool/LanguageTool-4.8/languagetool-commandline.jar'
alias less='less -R'
alias pi900S='cd ~/git/piigab/Pi-900S/flask/'
alias todo='nvim ~/.todo'
alias cli="$HOME/git/github/cli/zig-cache/bin/cli"
alias qwerty='xmodmap $HOME/dotfiles/qgmlwb.xkb'
alias qgmlwb='setxkbmap us'

export CGO_ENABLE=0

music()
{
  mpv "$HOME/music/$1/" --loop-playlist=inf -vo=null --playlist-start=$(($RANDOM % ($(find "$HOME/music/$1"| wc -l) - 1)))
}

lmddgtfy()
{
  X="https://lmddgtfy.net/?q=$(echo $@ | sed 's/ /%20/g')"
  echo $X | xclip -sel clip
  echo $X
}

s()
{
  links "https://duckduckgo.com/lite/search?q=$(echo $@ | sed 's/ /%20/g')"
}

suspend()
{
  echo -n mem | sudo tee /sys/power/state  # suspend to ram
}

branch()
{
  X=$(git branch 2>/dev/null)
  echo -e "${GREEN}$(echo "$X" | grep '*' | tr -d ' ' | tr -d '*')${CLEAR} "
}

share ()
{
	uri=$(curl -F"file=@$1" https://0x0.st)
	echo $uri | xclip -sel clip
	echo $uri
}

shareclip() {
	xclip -sel clip -o > /tmp/shareclip
	share /tmp/shareclip
}

shorten ()
{
	uri=$(curl -F"shorten=$1" https://0x0.st)
	echo $uri | xclip -sel clip
	echo $uri
}

url()
{
	uri=$(curl -F"url=$1" https://0x0.st)
	echo $uri | xclip -sel clip
	echo $uri
}

ytdl ()
{
	youtube-dl -io '%(title)s.%(ext)s' \
		--external-downloader=aria2c \
		--geo-bypass \
		$@
}

wcap ()
{
	target="/tmp/tmp.png"
	[ -z $1 ] || target=$1
	scrot -s -o $target
	share $target
}

scap ()
{
	target="/tmp/tmp.png"
	[ -z $1 ] || target=$1
	scrot -o $target
	share $target
}

song()
{
	mpc current -f "%artist% - %album% - %title%" >> ~/.songs
}

current()
{
	mpc current -f "%artist% - %album% - %title%" | xclip -sel clip
}

wh()
{
	curl -L "https://wallhaven.cc/api/v1/search?q=$1" | sed 's,\\,,g' | egrep -o "https://w.wallhaven.cc/full/[a-z0-9]+/wallhaven-[a-z0-9]+.jpg"
}

bright()
{
  L=$(cat /sys/class/backlight/intel_backlight/max_brightness)
  V=$1
  [ $L -lt $V ] && V=$L
  echo $V | sudo tee /sys/class/backlight/intel_backlight/brightness
}

radio()
{
    case $1 in
        "cyberia")
            mpv "http://lainon.life:8000/cyberia.ogg"
            ;;
        "cafe")
            mpv "http://lainon.life:8000/cafe.ogg"
            ;;
        "swing")
            mpv "http://lainon.life:8000/swing.ogg"
            ;;
        "everything")
            mpv "http://lainon.life:8000/everything.ogg"
            ;;
        *)
            echo "idk"
            ;;
    esac
}

mu() {
  local v=() t=$(stty -g)
  stty -echo
  echo -en "\E[6n"
  IFS='[;' read -rd R -a v
  stty $t
  LEN=(${v[@]:1})
  LEN=$(($LINES - $LEN))
  if [ $LEN -lt 20 ]; then
    LEN=20
  fi
  case $1 in
    "l")
      X=$(mpc lspl | fzy -l $LEN)
      [ -n "$X" ] && mpc clear && mpc load "$X" && mpc play
      mu s
      ;;
    "s")
      X=$(mpc playl | nl -s "| " | fzy -l $LEN | sed 's,[ \t]*\([0-9]*\)|.*,\1,')
      [ -n "$X" ] && mpc play $X
      ;;
    "p")
      mpc toggle
      ;;
    "h")
      mpc stop
      ;;
    *)
      mpc $@
      ;;
  esac
}

### WORK

pi900() {
  case "$2" in
    "httpd")
      ssh "root@192.168.10.$1" -C "/etc/init.d/S50lighttpd $3"
      ;;
    "send")
      scp "$3" "root@192.168.10.$1:/var/www1/$4"
      ;;
    "ssh")
      ssh "root@192.168.10.$1"
      ;;
    "mount")
      sshfs "root@192.168.10.$1:/var/www1" "$3"
      ;;
    "flask")
      ssh "root@192.168.10.$1" -C "cd /var/www1 && FLASK_ENV=development python3 main.py"
      ;;
    "install")
      scp "$HOME/.ssh/id_rsa.pub" "root@192.168.10.$1:/tmp/"
      ssh "root@192.168.10.$1" 'cat /tmp/id_rsa.pub >> ~/.ssh/authorized_keys'
      ;;
      *)
      echo "wat"
      ;;
  esac
}

wifi() {
  case $1 in
    "home")
      sudo iwconfig wlp3s0 essid "B-LINK_938196"
      sudo dhclient wlp3s0
      ;;
    *)
      echo "idk"
      ;;
  esac
}

_pigenmap() {
  case $1 in
    "files")
      DIRS=$(find | grep -v '__pycache__' | grep -v 'unused')
      ;;
    *)
      DIRS=$(find -type d | grep -v '__pycache__' | grep -v 'unused')
      ;;
  esac
  C=0x0
  for l in $DIRS
  do
    LAST=""
    NEST=0
    for d in $(echo $l | tr '/' '\n')
    do
      if [ -z $LAST ]
      then
        echo "\"$d$NEST\"[label=\"$(pwd | sed 's:.*/\([a-z0-9A-Z_]*\):\1:')\"];"
      else
        COLOR=$(printf "#%x%x%x%x%x%x" $C $C $C $C $C $C)
        C=$(((C + 2) % 12))
        echo "\"$d$NEST$LAST\"[label=\"$d\"];"
        echo "\"$LAST\" -- \"$d$NEST$LAST\"[color=\"$COLOR\"];"
      fi
      LAST="$d$NEST$LAST"
      NEST=$((NEST + 1))
    done
  done
}

pigenmap() {
  echo "graph G {"
  echo "overlap = false;"
  echo "rankdir=LR;"
  echo "splines=ortho;"
  echo "node[shape=none];"
  LAST=""
  _pigenmap $1 | sort | while read -r l; do \
    x=$(echo "$l" | sed "s,\[color=.*,,"); \
    [ "$x" != "$LAST" ] && echo "$l"; \
    LAST="$x"; \
  done
  echo "}"
}

crf() {
  mpv https://chalmersrobotics.se/status/api/image/crf_webcam_inner \
      https://chalmersrobotics.se/status/api/image/crf_webcam_outer \
      https://chalmersrobotics.se/status/api/image/crf_webcam_platform \
      https://chalmersrobotics.se/status/api/image/crf_webcam_prusa_mmu \
      https://chalmersrobotics.se/status/api/image/crf_webcam_prusa_red \
      https://chalmersrobotics.se/status/api/image/crf_webcam_prusa_gray
}

alias oai="java -jar $HOME/data/build/openapi-generator-cli-4.3.1.jar"

onworkscreen()
{
  xrandr --output DP-2-2 --left-of eDP-1 --auto
  xrandr --output DP-1-2 --right-of eDP-1 --auto
  sh ~/.fehbg
}

offworkscreen()
{
  # yes this is lazy
  xrandr --output DP-2-2 --off
  xrandr --output DP-1-2 --off
  sh ~/.fehbg
}
